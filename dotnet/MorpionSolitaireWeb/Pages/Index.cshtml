@page
@using MorpionSolitaire
@model IndexModel
@{
    ViewData["Title"] = "Home page";
	var game = Model.GetSessionGame();
	var footprint = game.GetFootPrint();
}

<div class="text-center">
	<div id="grid-container">@Html.Raw(game.ToSvg())</div>
	<p>Score: <b id="score-container">@game.GetScore()</b></p>
	<p>
		<button onclick="ajaxRequest('Undo')">Undo last move</button>
		<button onclick="ajaxRequest('UndoFive')">Undo last five moves</button>
		<button onclick="ajaxRequest('Restart')">Restart</button>
	</p>
	<p>
		<button onclick="ajaxRequest('Reload')">Reload image</button>
		use this button if you need more space on the grid
	</p>
	<h5>Save the current game to your computer...</h5>
	<form method="post">
		<input class="button" type="submit" value="Save" asp-page-handler="Download"/>
	</form>
	<h5>Open a saved game from your computer...</h5>
	<form method="post" enctype=multipart/form-data>
		<label for="file">Select a file:</label>
		<input type="file" name="file" id="file">
		<input class="button" type="submit" value="Open" asp-page-handler="Upload"/>
	</form>


	<script>
		// get elements by id
		const gridContainer = document.getElementById('grid-container');
		const scoreContainer = document.getElementById('score-container');
		
		// create a SVG group from a string
		function newSVGElement(content) {
            let element = document.createElementNS('http://www.w3.org/2000/svg', 'g');
            element.innerHTML = content;
            return element;
        }
		// interactive elements
		let interactiveLine = newSVGElement('<line x1="0" y1="0" x2="0" y2="0" style="stroke:blue;stroke-width:0.15" />');
		let interactivePt1 = newSVGElement('<circle cx="0" cy="0" r="0.2" fill="blue" />');
		let interactivePt2 = newSVGElement('<circle cx="0" cy="0" r="0.2" fill="blue" />');
		// gridContainer.firstChild.appendChild(interactivePt1);
		
		// mouse event listener
		let clicked = false;
		const pixelPerUnit = @Game.PixelsPerUnit;
		let minX = @footprint.Xmin;
		let minY = @footprint.Ymin;
		let x1 = 0;
		let x2 = 0;
		let y1 = 0;
		let y2 = 0;

		function mouseEnter() {
			gridContainer.firstChild.appendChild(interactivePt1);
		}
		function mouseLeave() {
			interactivePt1.remove();
			if (clicked) {
				clicked = false;
				interactiveLine.remove();
				interactivePt2.remove();
			}
		}
		function mouseMove(mouse) {
			x1 = Math.floor(mouse.offsetX / pixelPerUnit) + minX;
			y1 = Math.floor(mouse.offsetY / pixelPerUnit) + minY;
			interactivePt1.firstElementChild.setAttribute('cx', x1);
			interactivePt1.firstElementChild.setAttribute('cy', y1);
			interactiveLine.firstElementChild.setAttribute('x1', x1);
			interactiveLine.firstElementChild.setAttribute('y1', y1);
		}
		function mouseClick(mouse) {
			x1 = Math.floor(mouse.offsetX / pixelPerUnit) + minX;
			y1 = Math.floor(mouse.offsetY / pixelPerUnit) + minY;
			if (clicked) {
				clicked = false;
				interactivePt2.remove();
				interactiveLine.remove();
				ajaxRequest(`TrySegment&x1=${x1}&y1=${y1}&x2=${x2}&y2=${y2}`);
			}
			else {
				clicked = true;
				x2 = x1;
				y2 = y1;
				interactiveLine.firstElementChild.setAttribute('x2', x2);
				interactiveLine.firstElementChild.setAttribute('y2', y2);
				interactivePt2.firstElementChild.setAttribute('cx', x2);
				interactivePt2.firstElementChild.setAttribute('cy', y2);
				gridContainer.firstChild.appendChild(interactiveLine);
				gridContainer.firstChild.appendChild(interactivePt2);
			}
		}
		function addMouseEventListeners(){
			gridContainer.firstChild.addEventListener("mouseenter", mouseEnter);
			gridContainer.firstChild.addEventListener("mouseleave", mouseLeave);
			gridContainer.firstChild.addEventListener("mousemove", mouseMove);
			gridContainer.firstChild.addEventListener("click", mouseClick);
		}
		
		addMouseEventListeners();
		
		
		// AJAX request
		function ajaxRequest(handler) {
			$.ajax({ 
				url: '?handler=' + handler,
				success: function (data) {
					responseHandler(data)
				}
			});
		}
		// function to handle AJAX requests' responses
		function responseHandler(data) {
			scoreContainer.innerText = data.score;
			switch(data.type) {
				case "Add":
					gridContainer.firstChild.appendChild(newSVGElement(data.newElement));
					break;
				case "Replace":
					gridContainer.innerHTML = data.gridContent;
					minX = data.minX;
					minY = data.minY;
					addMouseEventListeners();
					break;
				default:
			}
			if (data.message !== ""){
				alert(data.message);
			}
		}
		
	</script>
</div>