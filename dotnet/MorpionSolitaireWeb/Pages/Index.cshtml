@page
@using System.Security.AccessControl
@using MorpionSolitaire
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
	<div>
@Html.Raw(Model.Game.ToSvg("grid", "\t\t"))
	</div>
	<p>
		<button disabled>Undo last move</button>
		<button onclick="ajaxRequest('Restart')">Restart</button>
		<br/>
		<button disabled>Play one move at random</button>
		<button disabled>Play until the end</button>
	</p>

	<script>
		// get the various elements by id
		let grid = document.getElementById('grid');
		let background = document.getElementById('grid-background');
		
		// AJAX request
		function ajaxRequest(handler) {
			$.ajax({ 
				url: '?handler=' + handler,
				success: function (data) {
					responseHandler(data)
				}
			});
		}
		// function to handle AJAX requests' responses
		function responseHandler(data) {
			switch(data.action) {
				case "add":
					grid.insertAdjacentHTML("beforeend", data.content);
					break;
				case "replace":
					grid.innerHTML = data.content;
					grid.insertAdjacentElement("afterbegin", background);
					break;
				case "remove":
					document.getElementById(data.content).delete();
					break;
				default:
					
			}
		}
		
		// interactive elements
		let x1 = @Model.Xmin - 1;
		let x2 = @Model.Xmin - 1;
		let y1 = 0;
		let y2 = 0;
		grid.insertAdjacentHTML("beforeend", `<line id="interactive-line" x1="${x1}" y1="${y1}" x2="${x2}" y2="${y2}" style="stroke:blue;stroke-width:0.15" />`);
		grid.insertAdjacentHTML("beforeend", `<circle id="interactive-pt1" cx="${x1}" cy="${y1}" r="0.2" fill="blue" />`);
		grid.insertAdjacentHTML("beforeend", `<circle id="interactive-pt2" cx="${x2}" cy="${y2}" r="0.2" fill="blue" />`);
		let interactiveLine = document.getElementById("interactive-line");
		let interactivePt1 = document.getElementById("interactive-pt1");
		let interactivePt2 = document.getElementById("interactive-pt2");
		// interactivePt1.remove();
		interactivePt2.remove();
		interactiveLine.remove();
		
		// mouse event listener
		let clicked = false;
		const pixelPerUnit = @Game.PixelsPerUnit;
		const minX = @Model.Xmin;
		const minY = @Model.Ymin;

		grid.addEventListener("mouseenter", function () {
			grid.insertAdjacentElement("beforeend", interactivePt1);
		});
		grid.addEventListener("mouseleave", function () {
			interactivePt1.remove();
			if (clicked) {
				clicked = false;
				interactiveLine.remove();
				interactivePt2.remove();
			}
		});
		grid.addEventListener("mousemove", function (mouse) {
			x1 = Math.floor(mouse.offsetX / pixelPerUnit) + minX;
            y1 = Math.floor(mouse.offsetY / pixelPerUnit) + minY;
			interactivePt1.setAttribute('cx', x1);
			interactivePt1.setAttribute('cy', y1);
			interactiveLine.setAttribute('x1', x1);
			interactiveLine.setAttribute('y1', y1);
		});
		grid.addEventListener("click", function (mouse) {
			x1 = Math.floor(mouse.offsetX / pixelPerUnit) + minX;
            y1 = Math.floor(mouse.offsetY / pixelPerUnit) + minY;
			if (clicked) {
				clicked = false;
				interactivePt2.remove();
				interactiveLine.remove();
				ajaxRequest(`TrySegment&x1=${x1}&y1=${y1}&x2=${x2}&y2=${y2}`);
			}
			else {
				clicked = true;
				x2 = x1;
				y2 = y1;
				interactiveLine.setAttribute('x2', x2);
				interactiveLine.setAttribute('y2', y2);
				interactivePt2.setAttribute('cx', x2);
				interactivePt2.setAttribute('cy', y2);
				grid.insertAdjacentElement("beforeend", interactiveLine);
				grid.insertAdjacentElement("beforeend", interactivePt2);
			}
		});
		
	</script>
</div>