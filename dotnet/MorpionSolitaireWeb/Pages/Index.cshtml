@page
@using System.Security.AccessControl
@using MorpionSolitaire
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
	<h1 class="display-4">Welcome</h1>
	<div id="grid-container">
		@Html.Raw(Model.GridString())
	</div>
	<p>
		<button type="button">Undo last move</button>
		<button type="button">Restart</button>
		<br/>
		<button type="button" onclick="play()">Play at random</button>
	</p>
	<p id="debug">Startup</p>
	<g id="mouse-group">
		<circle id="mouse-pt1" cx="0" cy="0" r="0.2" fill="blue" />
		<circle id="mouse-pt2" cx="0" cy="0" r="0.2" fill="blue" />
		<line id="mouse-line" x1="0" y1="0" x2="0" y2="0" style="stroke:blue;stroke-width:0.15" />
	</g>
	
	<script>
		let debug = document.getElementById('debug');
		
		function play() {
			debug.innerText = 'before request';
			$.ajax({ 
				url: '?handler=Debug',
				success: function(){
					debug.innerText = 'success';
				}
			});
		}
		
		function show_grid() {
			grid_container.innerText = @Html.Raw(Model.GridString())
		}
		
		function add_segment() {
			let url = `?handler=TrySegment&x1=${x1}&y1=${y1}&x2=${x2}&y2=${y2}`;
            debug.innerText = url;
		}
		
		const pixelPerUnit = @Grid.PixelsPerUnit;
		const minX = @Model.Xmin;
		const minY = @Model.Ymin;

		let svg_grid = document.getElementById('grid');
		let mouse_group = document.getElementById('mouse-group');
		let mouse_pt1 = document.getElementById('mouse-pt1');
		let mouse_pt2 = document.getElementById('mouse-pt2');
		let mouse_line = document.getElementById('mouse-line');
		

		document.removeChild(mouse_group);
		
		let mouse_click = false;
		let x1 = 0;
		let x2 = 0;
		let y1 = 0;
		let y2 = 0;
		
		svg_grid.addEventListener('click', function (mouse) {
			if (mouse_click) {
				add_segment();
				mouse_click = false;
				svg_grid.removeChild(mouse_group);
			}
			else {
				x1 = Math.floor(mouse.offsetX / pixelPerUnit) + minX;
				y1 = Math.floor(mouse.offsetY / pixelPerUnit) + minY;
				mouse_pt1.setAttribute('cx', x1);
				mouse_pt1.setAttribute('cy', y1);
				mouse_pt2.setAttribute('cx', x1);
				mouse_pt2.setAttribute('cy', y1);
				mouse_line.setAttribute('x1', x1);
				mouse_line.setAttribute('y1', y1);
				mouse_line.setAttribute('x2', x1);
				mouse_line.setAttribute('y2', y1);
				mouse_click = true;
				svg_grid.appendChild(mouse_group);
			}
		});
		svg_grid.addEventListener('mousemove', function (mouse) {
			if (mouse_click) {
				x2 = Math.floor(mouse.offsetX / pixelPerUnit) + minX;
                y2 = Math.floor(mouse.offsetY / pixelPerUnit) + minY;
				mouse_pt2.setAttribute('cx', x2);
				mouse_pt2.setAttribute('cy', y2);
				mouse_line.setAttribute('x2', x2);
				mouse_line.setAttribute('y2', y2);
			}
		});
		svg_grid.addEventListener('mouseout', function() {
			if (mouse_click){
				mouse_click = false;
				svg_grid.removeChild(mouse_group);
			}
		});
		
	</script>
</div>