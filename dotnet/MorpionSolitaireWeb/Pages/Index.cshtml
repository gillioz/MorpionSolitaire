@page
@using System.Security.AccessControl
@using MorpionSolitaire
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
	<p style="color:red;">@Model.ErrorMessage</p>
	<div>
@Html.Raw(IndexModel.Game.ToSvg("grid", "\t\t"))
	</div>
	<p>Score: <b id="score">@IndexModel.Game.GetScore()</b></p>
	<p>
		<button onclick="ajaxRequest('Undo')">Undo last move</button>
		<button onclick="ajaxRequest('UndoFive')">Undo last five moves</button>
		<button onclick="ajaxRequest('Restart')">Restart</button>
	</p>
	<p>
		<button onclick="ajaxRequest('Resize')">Resize image</button>
	</p>
	<h5>Save the current game to your computer...</h5>
	<form method="post">
		<input class="button" type="submit" value="Save" asp-page-handler="Download"/>
	</form>
	<h5>Open a saved game from your computer...</h5>
	<form method="post" enctype=multipart/form-data>
		<label for="file">Select a file:</label>
		<input type="file" name="file">
		<input class="button" type="submit" value="Open" asp-page-handler="Upload"/>
	</form>


	<script>
		// get elements by id
		let grid = document.getElementById('grid');
		let background = document.getElementById('grid-background');
		let score = document.getElementById('score');
		
		// AJAX request
		function ajaxRequest(handler) {
			$.ajax({ 
				url: '?handler=' + handler,
				success: function (data) {
					responseHandler(data)
				}
			});
		}
		// function to handle AJAX requests' responses
		function responseHandler(data) {
			switch(data.type) {
				case "Add":
					grid.insertAdjacentHTML("beforeend", data.content);
					break;
				case "Replace":
					grid.innerHTML = data.content;
					grid.insertAdjacentElement("afterbegin", background);
					break;
				case "Resize":
					grid.setAttribute("width", data.width);
					grid.setAttribute("height", data.height);
					grid.setAttribute("viewbox", data.viewBox);
					background.innerHTML = data.background;
					minX = data.minX;
					minY = data.minY;
					break;
				case "Alert":
					alert(data.message);
					break;
				default:
					
			}
			score.innerText = data.score;
		}
		
		// interactive elements
		let x1 = @IndexModel.Footprint.Xmin - 1;
		let x2 = @IndexModel.Footprint.Xmin - 1;
		let y1 = 0;
		let y2 = 0;
		grid.insertAdjacentHTML("beforeend", `<line id="interactive-line" x1="${x1}" y1="${y1}" x2="${x2}" y2="${y2}" style="stroke:blue;stroke-width:0.15" />`);
		grid.insertAdjacentHTML("beforeend", `<circle id="interactive-pt1" cx="${x1}" cy="${y1}" r="0.2" fill="blue" />`);
		grid.insertAdjacentHTML("beforeend", `<circle id="interactive-pt2" cx="${x2}" cy="${y2}" r="0.2" fill="blue" />`);
		let interactiveLine = document.getElementById("interactive-line");
		let interactivePt1 = document.getElementById("interactive-pt1");
		let interactivePt2 = document.getElementById("interactive-pt2");
		// interactivePt1.remove();
		interactivePt2.remove();
		interactiveLine.remove();
		
		// mouse event listener
		let clicked = false;
		const pixelPerUnit = @Game.PixelsPerUnit;
		let minX = @IndexModel.Footprint.Xmin;
		let minY = @IndexModel.Footprint.Ymin;

		grid.addEventListener("mouseenter", function () {
			grid.insertAdjacentElement("beforeend", interactivePt1);
		});
		grid.addEventListener("mouseleave", function () {
			interactivePt1.remove();
			if (clicked) {
				clicked = false;
				interactiveLine.remove();
				interactivePt2.remove();
			}
		});
		grid.addEventListener("mousemove", function (mouse) {
			x1 = Math.floor(mouse.offsetX / pixelPerUnit) + minX;
            y1 = Math.floor(mouse.offsetY / pixelPerUnit) + minY;
			interactivePt1.setAttribute('cx', x1);
			interactivePt1.setAttribute('cy', y1);
			interactiveLine.setAttribute('x1', x1);
			interactiveLine.setAttribute('y1', y1);
		});
		grid.addEventListener("click", function (mouse) {
			x1 = Math.floor(mouse.offsetX / pixelPerUnit) + minX;
            y1 = Math.floor(mouse.offsetY / pixelPerUnit) + minY;
			if (clicked) {
				clicked = false;
				interactivePt2.remove();
				interactiveLine.remove();
				ajaxRequest(`TrySegment&x1=${x1}&y1=${y1}&x2=${x2}&y2=${y2}`);
			}
			else {
				clicked = true;
				x2 = x1;
				y2 = y1;
				interactiveLine.setAttribute('x2', x2);
				interactiveLine.setAttribute('y2', y2);
				interactivePt2.setAttribute('cx', x2);
				interactivePt2.setAttribute('cy', y2);
				grid.insertAdjacentElement("beforeend", interactiveLine);
				grid.insertAdjacentElement("beforeend", interactivePt2);
			}
		});
		
	</script>
</div>